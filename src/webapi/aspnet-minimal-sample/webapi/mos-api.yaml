openapi: 3.1.1
info:
  title: Mos API
  description: Mos API for managing categories, products, and orders
  version: 1.0.0
  contact:
    name: moonmile solutions
servers:
  - url: "http://localhost:8000/mos/api"
    description: Local development server
paths:
  # Categories CRUD
  /categories:
    get:
      summary: Get all categories
      operationId: getCategories
      tags:
        - Categories
      parameters:
        - name: display
          in: query
          description: Filter by display status
          required: false
          schema:
            type: integer
            enum: [0, 1]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryListResponse'
              example:
                items:
                  - id: 1
                    slug: "special1"
                    title: "今月のおすすめ"
                    description: "今月のおすすめ商品を紹介します。"
                    image: "special1.jpg"
                    sortid: 1
                    display: true
                    created_at: "2023-01-01T00:00:00Z"
                    updated_at: "2023-01-01T00:00:00Z"
                    deleted_at: null
                total: 1
    post:
      summary: Create a new category
      operationId: createCategory
      tags:
        - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreate'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /categories/{id}:
    get:
      summary: Get a category by ID
      operationId: getCategoryById
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a category
      operationId: updateCategory
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdate'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a category
      operationId: deleteCategory
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Category deleted successfully
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Products CRUD
  /products:
    get:
      summary: Get all products
      operationId: getProducts
      tags:
        - Products
      parameters:
        - name: display
          in: query
          description: Filter by display status
          required: false
          schema:
            type: integer
            enum: [0, 1]
        - name: category_id
          in: query
          description: Filter by category ID
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
              example:
                items:
                  - id: 1
                    category_id: 1
                    slug: "burger1"
                    name: "モスバーガー"
                    description: ""
                    image: "burger1.jpg"
                    price: 440
                    sortid: 1
                    display: 1
                    created_at: "2023-01-01T00:00:00Z"
                    updated_at: "2023-01-01T00:00:00Z"
                    deleted_at: null
                    category:
                      id: 1
                      slug: "special1"
                      title: "今月のおすすめ"
                      description: "今月のおすすめ商品を紹介します。"
                      image: "special1.jpg"
                      sortid: 1
                      display: true
                      created_at: "2023-01-01T00:00:00Z"
                      updated_at: "2023-01-01T00:00:00Z"
                      deleted_at: null
                total: 1
    post:
      summary: Create a new product
      operationId: createProduct
      tags:
        - Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/slug/{category_slug}:
    get:
      summary: Get products by category slug
      operationId: getProductsByCategorySlug
      tags:
        - Products
      parameters:
        - name: category_slug
          in: path
          required: true
          schema:
            type: string
          description: Category slug to filter products
        - name: display
          in: query
          description: Filter by display status
          required: false
          schema:
            type: integer
            enum: [0, 1]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListWithCategoryResponse'
              example:
                items:
                  - id: 1
                    category_id: 1
                    slug: "burger1"
                    name: "モスバーガー"
                    description: ""
                    image: "burger1.jpg"
                    price: 440
                    sortid: 1
                    display: 1
                    created_at: "2023-01-01T00:00:00Z"
                    updated_at: "2023-01-01T00:00:00Z"
                    deleted_at: null
                    category:
                      id: 1
                      slug: "special1"
                      title: "今月のおすすめ"
                      description: "今月のおすすめ商品を紹介します。"
                      image: "special1.jpg"
                      sortid: 1
                      display: true
                      created_at: "2023-01-01T00:00:00Z"
                      updated_at: "2023-01-01T00:00:00Z"
                      deleted_at: null
                total: 1
                category:
                  id: 1
                  slug: "special1"
                  title: "今月のおすすめ"
                  description: "今月のおすすめ商品を紹介します。"
                  image: "special1.jpg"
                  sortid: 1
                  display: true
                  created_at: "2023-01-01T00:00:00Z"
                  updated_at: "2023-01-01T00:00:00Z"
                  deleted_at: null
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/{id}:
    get:
      summary: Get a product by ID
      operationId: getProductById
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a product
      operationId: updateProduct
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a product
      operationId: deleteProduct
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Orders CRUD
  /orders:
    get:
      summary: Get all orders
      operationId: getOrders
      tags:
        - Orders
      parameters:
        - name: status
          in: query
          description: Filter by order status
          required: false
          schema:
            type: integer
            enum: [0, 1, 2]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      summary: Create a new order
      operationId: createOrder
      tags:
        - Orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
            example:
              total_price: 3000
              total_quantity: 5
              status: 0
              items:
                - id: 1
                  price: 1000
                  quantity: 2
                - id: 2
                  price: 2000
                  quantity: 3
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders/{id}:
    get:
      summary: Get an order by ID
      operationId: getOrderById
      tags:
        - Orders
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an order
      operationId: updateOrder
      tags:
        - Orders
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdate'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete an order
      operationId: deleteOrder
      tags:
        - Orders
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Order deleted successfully
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    # Category schemas
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        slug:
          type: string
          example: "special1"
        title:
          type: string
          example: "今月のおすすめ"
        description:
          type: string
          example: "今月のおすすめ商品を紹介します。"
        image:
          type: string
          example: "special1.jpg"
        sortid:
          type: integer
          example: 1
        display:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        deleted_at:
          type: ["string", "null"]
          format: date-time
          example: null

    CategoryCreate:
      type: object
      required:
        - slug
        - title
      properties:
        slug:
          type: string
          example: "special1"
        title:
          type: string
          example: "今月のおすすめ"
        description:
          type: string
          example: "今月のおすすめ商品を紹介します。"
        image:
          type: string
          example: "special1.jpg"
        sortid:
          type: integer
          example: 1
        display:
          type: integer
          enum: [0, 1]
          example: 1

    CategoryUpdate:
      type: object
      properties:
        slug:
          type: string
          example: "special1"
        title:
          type: string
          example: "今月のおすすめ"
        description:
          type: string
          example: "今月のおすすめ商品を紹介します。"
        image:
          type: string
          example: "special1.jpg"
        sortid:
          type: integer
          example: 1
        display:
          type: integer
          enum: [0, 1]
          example: 1

    CategoryListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        total:
          type: integer
          example: 10

    # Product schemas
    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        category_id:
          type: integer
          example: 1
        slug:
          type: string
          example: "burger1"
        name:
          type: string
          example: "モスバーガー"
        description:
          type: string
          example: ""
        image:
          type: string
          example: "burger1.jpg"
        price:
          type: number
          format: float
          example: 440
        sortid:
          type: integer
          example: 1
        display:
          type: integer
          enum: [0, 1]
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        deleted_at:
          type: ["string", "null"]
          format: date-time
          example: null
        category:
          $ref: '#/components/schemas/Category'

    ProductCreate:
      type: object
      required:
        - name
        - price
      properties:
        category_id:
          type: integer
          example: 1
        slug:
          type: string
          example: "burger1"
        name:
          type: string
          example: "モスバーガー"
        description:
          type: string
          example: ""
        image:
          type: string
          example: "burger1.jpg"
        price:
          type: number
          format: float
          example: 440
        sortid:
          type: integer
          example: 1
        display:
          type: integer
          enum: [0, 1]
          example: 1

    ProductUpdate:
      type: object
      properties:
        category_id:
          type: integer
          example: 1
        slug:
          type: string
          example: "burger1"
        name:
          type: string
          example: "モスバーガー"
        description:
          type: string
          example: ""
        image:
          type: string
          example: "burger1.jpg"
        price:
          type: number
          format: float
          example: 440
        sortid:
          type: integer
          example: 1
        display:
          type: integer
          enum: [0, 1]
          example: 1

    ProductListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        total:
          type: integer
          example: 10

    ProductListWithCategoryResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        total:
          type: integer
          example: 10
        category:
          $ref: '#/components/schemas/Category'

    # Order schemas
    Order:
      type: object
      properties:
        id:
          type: integer
          example: 1
        order_number:
          type: string
          example: "ORD001"
        total_price:
          type: number
          format: float
          example: 1280
        total_quantity:
          type: integer
          example: 3
        status:
          type: integer
          enum: [0, 1, 2]
          example: 0
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        deleted_at:
          type: ["string", "null"]
          format: date-time
          example: null
        order_products:
          type: array
          items:
            $ref: '#/components/schemas/OrderProduct'

    OrderCreate:
      type: object
      required:
        - total_price
        - total_quantity
        - items
      properties:
        total_price:
          type: number
          format: float
          example: 1280
        total_quantity:
          type: integer
          example: 3
        status:
          type: integer
          enum: [0, 1, 2]
          example: 0
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemCreate'

    OrderUpdate:
      type: object
      properties:
        order_number:
          type: string
          example: "ORD001"
        total_price:
          type: number
          format: float
          example: 1280
        total_quantity:
          type: integer
          example: 3
        status:
          type: integer
          enum: [0, 1, 2]
          example: 0

    # Order Product schemas
    OrderProduct:
      type: object
      properties:
        id:
          type: integer
          example: 1
        order_id:
          type: integer
          example: 1
        product_id:
          type: integer
          example: 1
        price:
          type: number
          format: float
          example: 440
        quantity:
          type: integer
          example: 2
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        deleted_at:
          type: ["string", "null"]
          format: date-time
          example: null

    OrderProductCreate:
      type: object
      required:
        - product_id
        - price
        - quantity
      properties:
        product_id:
          type: integer
          example: 1
        price:
          type: number
          format: float
          example: 440
        quantity:
          type: integer
          example: 2

    OrderItemCreate:
      type: object
      required:
        - id
        - price
        - quantity
      properties:
        id:
          type: integer
          example: 1
        price:
          type: number
          format: float
          example: 440
        quantity:
          type: integer
          example: 2

    OrderProductUpdate:
      type: object
      properties:
        order_id:
          type: integer
          example: 1
        product_id:
          type: integer
          example: 1
        price:
          type: number
          format: float
          example: 440
        quantity:
          type: integer
          example: 2

    # Error schema
    Error:
      type: object
      properties:
        error:
          type: string
          example: "Resource not found"
        message:
          type: string
          example: "The requested resource could not be found"
